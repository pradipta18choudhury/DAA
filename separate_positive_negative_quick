/****
Design a C Program to segregate elements of a given array of N
integers so that all its negative elements precede all its positive elements.
The program must be time and space efficient. Display the input as well
as the output array as output (Hint: Make use of quicksort partitioning.)
****/


#include <stdio.h> 

// prototype for swap 
void swap(int *a, int *b); 

// The main function that rearranges elements of given array. 
// It puts positive elements at even indexes (0, 2, ..) and 
// negative numbers at odd indexes (1, 3, ..). 
void rearrange(int arr[], int n) 
{ 
	// The following few lines are similar to partition process 
	// of QuickSort. The idea is to consider 0 as pivot and 
	// divide the array around it. 
	int i = -1; 
	for (int j = 0; j < n; j++) 
	{ 
		if (arr[j] < 0) 
		{ 
			i++; 
			swap(&arr[i], &arr[j]); 
		} 
	} 

	
} 

// A utility function to swap two elements 
void swap(int *a, int *b) 
{ 
	int temp = *a; 
	*a = *b; 
	*b = temp; 
} 

// A utility function to print an array 
void printArray(int arr[], int n) 
{ 
	for (int i = 0; i < n; i++) 
		printf("%4d ", arr[i]); 
} 

// Driver program to test above functions 
int main() 
{ 
	int arr[] = {-1, 2, -3, 4, 5, 6, -7, 8, 9}; 
	int n = sizeof(arr)/sizeof(arr[0]); 
	printf("\n original array:\n");
	printArray(arr, n);
	printf("\nafter sort:\n");
	rearrange(arr, n); 
	printArray(arr, n); 
	return 0; 
} 
