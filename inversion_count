/******
Q2. Let A[1... n] be an array of n distinct numbers. If i &lt; j and A[ i ] &gt; A[
j ], then the pair &lt; i , j &gt; is called an inversion of A. For example, the list
&lt;2; 3; 8; 6; 1&gt; have five inversions. Write a program in C that determines
the number of inversions in any permutation on n elements in O(n lg n)
worst-case time. (Hint: Modify merge sort.)
******/
#include <stdio.h>
#include <stdlib.h>

int _mergeSort(int arr[], int temp[], 
						int left, int right);
int merge(int arr[], int temp[], int left, int mid,
		int right);


int mergeSort(int arr[], int array_size)
{
	int* temp = (int*)malloc(sizeof(int) * array_size);
	return _mergeSort(arr, temp, 0, array_size - 1);
}


int _mergeSort(int arr[], int temp[], int left, int right)
{
	int mid, inv_count = 0;
	if (right > left) {
		
		mid = (right + left) / 2;

		
		inv_count += _mergeSort(arr, temp, left, mid);
		inv_count += _mergeSort(arr, temp, mid + 1, right);

		/*Merge the two parts*/
		inv_count += merge(arr, temp, left, mid + 1, right);
	}
	return inv_count;
}

/* This funt merges two sorted arrays and returns inversion
count in the arrays.*/
int merge(int arr[], int temp[], int left, int mid,
		int right)
{
	int i, j, k;
	int inv_count = 0;

	i = left; /* i is index for left subarray*/
	j = mid; /* j is index for right subarray*/
	k = left; /* k is index for resultant merged subarray*/
	while ((i <= mid - 1) && (j <= right)) {
		if (arr[i] <= arr[j]) {
			temp[k++] = arr[i++];
		}
		else {
			temp[k++] = arr[j++];

			/*this is tricky -- see above
			* explanation/diagram for merge()*/
			inv_count = inv_count + (mid - i);
		}
	}

	/* Copy the remaining elements of left subarray
(if there are any) to temp*/
	while (i <= mid - 1)
		temp[k++] = arr[i++];

	/* Copy the remaining elements of right subarray
(if there are any) to temp*/
	while (j <= right)
		temp[k++] = arr[j++];

	/*Copy back the merged elements to original array*/
	for (i = left; i <= right; i++)
		arr[i] = temp[i];

	return inv_count;
}

/* Driver program to test above functions */
int main(int argv, char** args)
{
	int arr[] = { 2, 3, 8, 6, 1 };
	printf(" Number of inversions are %d \n",
		mergeSort(arr, 5));
	getchar();
	return 0;
}
